# -*- coding: utf-8 -*-
"""Ford GoBike Kaggle_VIDIT_ANALYSIS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zR2zqMwrMz4_r0vVogkzUKLdqXGs7vRB

FORD GOBIKE DATA EXPLORATION

By:  Vidit Agarwal
Ph - 9997302747

This data is been collected from kaggle dataset "FORD GOBIKE COMPETITION 2019 (https://www.kaggle.com/chirag02/ford-gobike-2019feb-tripdata )

INTRODUCTION :

Ford GoBike is one of the Largest Bike Sharing in California, 
U.S with a Huge number of Customerbase. Having differential kind of Vechicles and fulfilling the requirements of each customers with different interests accordingly.

Here,

We will be using  different Machine learning Techniques to filter Out and exploring various entities according to the Dataset so as to Provide proper Solution and fare rewiews accordingly.
"""

# Commented out IPython magic to ensure Python compatibility.
## IMPORTING LIBERARIES AND PACKAGES

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb
#from mpl_toolkits.basemap import Basemap
# %matplotlib inline

## Now Loading DataSet in Colab

from google.colab import files
upload = files.upload()

df = pd.read_csv('Gobike2019.csv')

df.head()

df.shape

df.info()

"""[183412 rows x 16 columns]

### What is the structure of your dataset?

Our data contains **183412
 records for 16 columns**. We can have a glimpse of the dataset below .
"""

df.describe()

df.columns

import seaborn as sns

sns.boxplot(x='member_birth_year',y='member_gender',data=df)

plt.scatter(df['start_time'],df['end_time'])
plt.xlabel('start_time')
plt.ylabel('end_time')

plt.show()

count,bin_edges = np.histogram(df['duration_sec'])

df['duration_sec'].plot(kind='hist',xticks=bin_edges)

plt.xlabel('duration_sec')
plt.ylabel('user_type')
plt.grid()

"""ANOVA (Analysis of Variance) ANOVA is a statistical method which is used for figuring out the relation between different groups of categorical data. The ANOVA test, gives us two measures as result:

F-test score: It calculates the variation between sample group means divided by variation within sample group.

P value: It shows us the confidence degree. In other words, it tells us whether the obtained result is statistically significant or not.

Visualising Null Values ,so as to have a better clarity
"""

df.isnull()   ## Checking Missing Values

sns.heatmap(df.isnull())

time_df = df[['start_time','end_time']].groupby(['duration_sec'])

stats.f_oneway(temp_df.get_group('bike_share_for_all_trip')['user_type'],temp_df.get_group('member_birth_year')['member_gender'])

plt.figure(figsize=(16,16)) #Plot a big(16x16) figure

correlation_matrix = df.corr()

sns.heatmap(correlation_matrix, annot=True)

sns.regplot(x='member_birth_year',y='duration_sec',data=df)

#changing data type of start_time and end_time to datetime.
df.start_time = pd.to_datetime(df.start_time)
df.end_time = pd.to_datetime(df.end_time)

df.bike_share_for_all_trip = (df.bike_share_for_all_trip == 'Yes')

"""DATASET has the following Specifications:

(duration_sec, start_time, end_time, start_station_id, start_station_name, start_station_latitude, start_station_longitude, end_station_id, end_station_name, end_station_latitude ,end_station_longitude, bike_id, user_type, member_birth_year, member_gender, bike_share_for_all_trip)

. Out of 16 specifications 9 are numerical, 2 are datetime, 4 are object type and 1 is boolean type.)
"""

pd.DataFrame(((df.count()-df.isnull().sum())/df.count())*100 , columns=['Coverage'])

"""Univariate Exploration:


I'll start by looking at the distribution of the main variable of interest: duration_sec.
"""

binsize = 500
bins = np.arange(0, df['duration_sec'].max()+binsize, binsize)

plt.figure(figsize=[8, 5])
plt.hist(data = df, x = 'duration_sec', bins = bins)
plt.title('Distribution of Trip Durations')
plt.xlabel('Duration (sec)')
plt.ylabel('Number of Trips')
plt.axis([-500, 10000, 0, 90000])
plt.show()

"""There is a long tail in the distribution so lets put it on log scale."""

log_binsize = 0.05
log_bins = 10 ** np.arange(2.4, np.log10(df['duration_sec'].max()) + log_binsize, log_binsize)
plt.figure(figsize=[8, 5])
plt.hist(data = df, x = 'duration_sec', bins = log_bins)
plt.title('Distribution of Trip Durations')
plt.xlabel('Duration (sec)')
plt.ylabel('Number of Trips')
plt.xscale('log')
plt.xticks([500, 1e3, 2e3, 5e3, 1e4], [500, '1k', '2k', '5k', '10k'])
plt.axis([0, 10000, 0, 15000])
plt.show()

"""Trip duration is mostly concentrated on the lower spectrum. Most of the values are less than 2000 seconds with peak around 600 seconds. Trip duration values first increases starting from arount 8000 values at 0 to 12500 values at around 600 but then starts to fall and raching below 2000 values under 2000 sec."""

##  Now lets look at other factors like start and end station id and birth year

# Plotting start station id distribution.
binsize = 1
bins = np.arange(0, df['start_station_id'].astype(float).max()+binsize, binsize)

plt.figure(figsize=[20, 8])
plt.xticks(range(0, 401, 10))
plt.hist(data = df.dropna(), x = 'start_station_id', bins = bins)
plt.title('Distribution of Start Stations')
plt.xlabel('Start Station')
plt.ylabel('Number of Stations')
plt.show()

# Plotting end station id distribution.
binsize = 1
bins = np.arange(0, df['end_station_id'].astype(float).max()+binsize, binsize)

plt.figure(figsize=[20, 8])
plt.xticks(range(0, 401, 10))
plt.hist(data = df.dropna(), x = 'end_station_id', bins = bins)
plt.title('Distribution of End Stations')
plt.xlabel('End Station')
plt.ylabel('Number of Stations')
plt.show()

"""We can see that same stations are more frequent as start stations and end stations."""

# Plotting age distribution derived from member's birth year.
binsize = 1
bins = np.arange(0, df['member_birth_year'].astype(float).max()+binsize, binsize)

plt.figure(figsize=[8, 5])
plt.hist(data = df.dropna(), x = 'member_birth_year', bins = bins)
plt.axis([1939, 2009, 0, 12000])
plt.xticks([1939, 1949, 1959, 1969, 1979, 1989, 1999, 2009], [(2019-1939), (2019-1949), (2019-1959), (2019-1969), (2019-1979), (2019-1989), (2019-1999), (2019-2009)])
plt.gca().invert_xaxis()
plt.title('Distribution of User Age')
plt.xlabel('Age (years)')
plt.ylabel('Number of Users')
plt.show()

"""We can see that the distribution is more concentrated between 20 to 40 years old."""

# plotting types of users on bar.
plt.figure(figsize=[8,5])
plt.bar(x = df.user_type.value_counts().keys(), height = df.user_type.value_counts() )
plt.xlabel('User Type')
plt.ylabel('Number of Users')
plt.show()

# plotting genders on bar.
plt.figure(figsize=[8,5])
plt.bar(x = df.member_gender.value_counts().keys(), height = df.member_gender.value_counts() )
plt.xlabel('Gender')
plt.ylabel('Number of Users')
plt.show()

# plotting genders on bar.
plt.figure(figsize=[8,5])
plt.bar(x = df.member_gender.value_counts().keys(), height = df.member_gender.value_counts() )
plt.xlabel('Gender')
plt.ylabel('Number of Users')
plt.show()

"""Bivariate Exploration:

Lets first have a look at the correlation between trip duration and age.
"""

plt.figure(figsize=[8,5])
plt.scatter((2019 - df['member_birth_year']), df['duration_sec'], alpha = 0.25, marker = '.' )
plt.axis([-5, 145, 500, 10500])
plt.xlabel('Age (years)')
plt.ylabel('Duaration (sec)')
plt.show()

plt.figure(figsize=[12,5])

plt.subplot(1, 2, 1)
plt.scatter((2019 - df['member_birth_year']), df['duration_sec'], alpha = 0.25, marker = '.' )
plt.axis([-5, 85, 500, 6500])
plt.xlabel('Age (years)')
plt.ylabel('Duaration (sec)')

plt.subplot(1, 2, 2)
bins_y = np.arange(500, 6500+1, 1000)
bins_x = np.arange(-5, 85+1, 10)
plt.hist2d((2019 - df['member_birth_year']), df['duration_sec'],
           bins = [bins_x, bins_y])
plt.colorbar(ticks=[10000, 20000, 30000, 40000]);
plt.show()

"""By looking at these olys we can say that most frequent users of bikes are aged between 20 and 45. Higher duration is clocked by younger members.

Now lets look into the duration dependency on start station and end station.
"""

sorted(df.start_station_id.unique())

t = []

all_start_station_ids = sorted(df.start_station_id.unique())
for x in all_start_station_ids :
    t.append(df[df.start_station_id == x].duration_sec.sum()) 
total_duration = pd.Series(t)

plt.figure(figsize = [20, 8])
sb.lineplot(x = df['start_station_id'], y = total_duration)
plt.xticks(range(0, 401, 10))
plt.xlabel('Start Station')
plt.ylabel('Total Duration')
plt.show()

t = []

all_end_station_ids = sorted(df.end_station_id.unique())
for x in all_end_station_ids :
    t.append(df[df.end_station_id == x].duration_sec.sum()) 
total_duration = pd.Series(t)

plt.figure(figsize = [20, 8])
sb.lineplot(x = df['start_station_id'], y = total_duration)
plt.xticks(range(0, 401, 10))
plt.xlabel('End Station')
plt.ylabel('Total Duration')
plt.show()

"""By looking at these plots you can see that trip duration for some station as start station is higher and for some stations as end station is higher. By this we can see that what stations result in starting of longer trips and what stations comes end of longer trips."""

plt.figure(figsize = [8, 5])
base_color = sb.color_palette()[1]
sb.boxplot(data = df, x = 'member_gender', y = 'duration_sec', color = base_color)
plt.xlabel('Gender')
plt.ylabel('Duration (sec)')
plt.show()

"""## Though quantity of male riders are very high then other and female but we can see that higher percentage of female and other rides longer trips then males."""

plt.figure(figsize = [8, 5])
base_color = sb.color_palette()[1]
sb.boxplot(data = df, x = 'user_type', y = 'duration_sec', color = base_color)
plt.ylim([-10, 2500])
plt.xlabel('User Type')
plt.ylabel('Duration (sec)')
plt.show()



"""As we can see, values are vey widespread to see a box plot, so lets trim duration to max 2000 sec to get clearer picture.

Now ,Lets Calculate for Duration_Sec <5000, in a "Hist" format to have a better view.
"""

df.query('duration_sec < 5000')['duration_sec'].plot.hist(bins =100, figsize = (10 , 8)).set(xlabel = 'Duration in seconds // Below 20000')
plt.show()

df.query('duration_sec < 5000')['duration_sec'].describe().to_frame()

"""As we can see that the distribution is not normal. The plot is right skewed and shows postivie skewness. 
Following are the observations from the above variable:
1. There are heavy outliers in our data. 1.1% of our records are for duration more than 5000 seconds.
2. We used log transformation to show normality in the boxplot above.
3. After plotting duration < 5000, we observed right skewness.

** This got me curious about the timing of the rides.**

Bivariate Exploration:


Let's take a look at this very interesting section. We can actually check the correlation.
"""

import seaborn as sns

"""Multivariate Exploration :

The main thing I want to explore in this part of the analysis is how the two categorical measures gender and user type play into the relationship between trip duration and age.
"""

gender_markers = [['Male', 's'],['Female', 'o'],['Other', 'v']]

for gender, marker in gender_markers:
    df_gender = df[df['member_gender'] == gender]
    plt.scatter((2019 - df_gender['member_birth_year']), df_gender['duration_sec'], marker = marker, alpha=0.25)
plt.legend(['Male','Female','Other'])
plt.axis([10, 80, -500, 9000 ])
plt.xlabel('Age (year)')
plt.ylabel('Duration (sec)')
plt.show()

user_types = sb.FacetGrid(data = df, col = 'member_birth_year', col_wrap = 2, size = 5,
                 xlim = [1980, 2005], ylim = [500, 9000])
user_types.map(plt.scatter, 'member_birth_year', 'duration_sec', alpha=0.25)
user_types.set_xlabels('member_birth_year')
user_types.set_ylabels('duration_sec')

plt.show()